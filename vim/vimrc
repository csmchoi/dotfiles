if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'benmills/vimux'
Plug 'christoomey/vim-tmux-navigator'
Plug 'sgur/vim-editorconfig'
Plug 'janko-m/vim-test'
Plug 'ludovicchabant/vim-gutentags'
Plug 'mattn/emmet-vim'
Plug 'sheerun/vim-polyglot'
Plug 'tommcdo/vim-lion'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'vim-airline/vim-airline'
Plug 'w0rp/ale'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'kana/vim-textobj-user'
Plug 'coderifous/textobj-word-column.vim'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-emoji'
Plug 'maralla/completor.vim'
Plug 'ternjs/tern_for_vim'
Plug 'tmux-plugins/vim-tmux'
Plug 'dracula/vim'

call plug#end()

let mapleader = " "

filetype plugin indent on
syntax on

runtime macros/matchit.vim

set autoread
set autowrite
set autoindent
set backspace=indent,eol,start
set clipboard=unnamed
set colorcolumn=81,101
set diffopt+=vertical
set display=truncate
set hidden
set history=500
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set list listchars=tab:——,trail:·,nbsp:·,extends:›,precedes:‹
set nobackup
set noshowmode
set nowritebackup
set noswapfile
set number
set relativenumber
set undolevels=1000
set ruler
set showcmd
set ttimeout
set ttimeoutlen=100
set wildmenu

if has('mouse')
  set mouse=a
endif

set termguicolors
set background=dark
colorscheme tiki

set iskeyword-=_

" Enable italics
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"
set t_ut=

" Persistent undo
let undodir = expand('~/.undo-vim')
if !isdirectory(undodir)
  call mkdir(undodir)
endif
set undodir=~/.undo-vim
set undofile

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Quicker window movement
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" zoom a vim pane
nnoremap <leader>z :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>Z :wincmd =<cr>

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" ======================================
" plugins
" ======================================
" use ripgrep for grep
if executable('rg')
  set grepprg=rg\ --vimgrep
  set grepformat=%f:%l:%c:%m
endif

" vim-test
let test#strategy = "vimux"
let g:VimuxOrientation = 'h'

nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>

" airline
let g:airline_theme = 'dracula'
let g:airline_mode_map = { 'n': 'N', 'i' : 'I', 'R': 'R', 'v': 'V', 'V': 'V' }

" ALE
let g:ale_sign_column_always = 1
let g:ale_javascript_eslint_use_global = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_lint_on_text_changed = 'never'

if emoji#available()
  let g:ale_sign_error = emoji#for('sos')
  let g:ale_sign_warning = emoji#for('vibration_mode')
endif

" fzf.vim
nnoremap <c-p> :Files<cr>
imap <c-x><c-l> <plug>(fzf-complete-line)
imap <c-x><c-f> <plug>(fzf-complete-path)

nnoremap <silent> <leader>B :Buffers<CR>
nnoremap <silent> <leader>W :Windows<CR>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>[ :BTags<CR>
nnoremap <silent> <leader>] :Tags<CR>
nnoremap <silent> <leader>? :History<CR>

" vim-commentary
nmap cm <Plug>Commentary

" vim-rails
nnoremap <leader>aa :A<CR>
nnoremap <leader>as :AS<CR>
nnoremap <leader>av :AV<CR>

" editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

map <leader>H :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">" . " FG:" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"fg#")<CR>
