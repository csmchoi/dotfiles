" vim: foldmethod=marker foldlevel=0

" ------------------------------------------------------------------------------
" Settings
" ------------------------------------------------------------------------------
" Settings {{{
let mapleader = " "

set autoread
set autowrite
set autoindent
set backspace=indent,eol,start
set clipboard=unnamed
set colorcolumn=81,101
set completeopt+=menuone,noselect
set diffopt+=vertical
set display=truncate
set foldlevelstart=999
set foldmethod=indent
set hidden
set history=500
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set list listchars=tab:——,trail:·,nbsp:·,extends:›,precedes:‹
set mouse=a
set nobackup
set nowritebackup
set noswapfile
set number
set relativenumber
set shortmess+=c   " Shut off completion messages
set undolevels=1000
set signcolumn=yes
set smartcase
set showcmd
set ttimeout
set ttimeoutlen=100
set ttyfast
set wildmenu

if filereadable(expand("~/.vim/vimrc.bundles"))
  source ~/.vim/vimrc.bundles
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

filetype plugin indent on
" }}}
" Colorscheme {{{
set termguicolors
colorscheme tiki
" }}}
" Enable italics under tmux {{{
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"
set t_ut=
" }}}
" Set custom grepprg {{{
if executable('rg')
  set grepprg=rg\ --vimgrep
  set grepformat=%f:%l:%c:%m
elseif executable('fd')
  set grepprg=fd\ --hidden\ --type\ f
  set grepformat=%f:%l:%c:%m
endif
" }}}
" Persistent undo {{{
let undodir = expand('~/.vim/undo')
if !isdirectory(undodir)
  call mkdir(undodir)
endif
set undodir=undodir
set undofile
" }}}
" ------------------------------------------------------------------------------
" Keymaps
" ------------------------------------------------------------------------------
" Grep word under cursor {{{
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" }}}
" Window manipulation {{{
" zoom a vim pane
" Quicker window movement
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Resize windows
nnoremap <esc><up>    <c-w>+
nnoremap <esc><down>  <c-w>-
nnoremap <esc><left>  <c-w><
nnoremap <esc><right> <c-w>>

nnoremap <leader>zi :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>zo :wincmd =<cr>

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" }}}
" ------------------------------------------------------------------------------
" Plugins
" ------------------------------------------------------------------------------
" janko-m/vim-test {{{
let test#strategy = "vimux"
let g:VimuxOrientation = 'h'

nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>
" }}}
" junegunn/fzf.vim {{{
nnoremap <c-p> :Files<cr>
nnoremap <silent> <leader>B :Buffers<CR>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>[ :BTags<CR>
nnoremap <silent> <leader>] :Tags<CR>
nnoremap <silent> <leader>? :History<CR>

let g:fzf_colors = {
  \ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Pmenu'],
  \ 'hl':      ['fg', 'Pmenu'],
  \ 'fg+':     ['fg', 'PmenuSel'],
  \ 'bg+':     ['bg', 'PmenuSel'],
  \ 'hl+':     ['fg', 'Pmenu'],
  \ 'info':    ['fg', 'Pmenu'],
  \ 'prompt':  ['fg', 'Pmenu'],
  \ 'pointer': ['fg', 'PmenuSel'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment']
  \ }
" }}}
" lifepillar/vim-colortemplate {{{
map <leader>H :call colortemplate#syn#toggle()<CR>
" }}}
" lifepillar/vim-mucomplete {{{
inoremap <expr> <cr> mucomplete#popup_exit("\<cr>")
let g:mucomplete#enable_auto_at_startup = 1
" }}}
" plasticboy/vim-markdown {{{
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'ruby=rb']
" }}}
" sgur/vim-editorconfig {{{
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
" }}}
" tpope/vim-commentary {{{
nmap cm <Plug>Commentary
" }}}
" tpope/vim-rails {{{
nnoremap <leader>aa :A<CR>
nnoremap <leader>as :AS<CR>
nnoremap <leader>av :AV<CR>
" }}}
" w0rp/ale {{{
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0

if emoji#available()
  let g:ale_sign_error = emoji#for('fire')
  let g:ale_sign_warning = emoji#for('point_right')
endif

nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)
" }}}
" Local config {{{
if filereadable($HOME . "/.vim/vimrc.local")
  source ~/.vim/vimrc.local
endif
" }}}
